name: Deploy to Remote Server

on:
  push:
    branches:
      - main  # Change this to your deploy branch if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup deployment logging
        run: |
          echo "üöÄ Starting deployment process..."
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date)"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github-actions
          chmod 600 ~/.ssh/github-actions
          echo "Testing if host is reachable..."
          nc -zv ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }} || (echo "‚ùå Port not open or server unreachable" && exit 1)
          echo "‚úÖ Host and port are reachable."
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy project files to remote server
        run: |
          echo "üìÅ Copying project files to remote server..."
          # Create deployment directory if it doesn't exist
          ssh -i ~/.ssh/github-actions -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/my-app-deployment"
          
          # Copy all files except .git, node_modules, and .github
          rsync -avz --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.github' \
            --exclude '.env.local' \
            -e "ssh -i ~/.ssh/github-actions -p ${{ secrets.SSH_PORT }}" \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/my-app-deployment/
          
          echo "‚úÖ Files copied successfully!"

      - name: Install dependencies and start app
        run: |
          ssh -i ~/.ssh/github-actions -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error
          
          echo "üîß Setting up deployment..."
          cd ~/my-app-deployment
          
          # Log system info for debugging
          echo "üìä System Information:"
          echo "Hostname: $(hostname)"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "PM2 version: $(pm2 --version)"
          
          # Install project dependencies
          echo "üì¶ Installing project dependencies..."
          npm install
          echo "‚úÖ Dependencies installed successfully!"
          
          # Stop existing PM2 process if running
          echo "üõë Stopping existing PM2 process..."
          pm2 stop app-demo 2>/dev/null || echo "No existing process to stop"
          pm2 delete app-demo 2>/dev/null || echo "No existing process to delete"
          
          # Start the application with PM2
          echo "üéØ Starting application with PM2..."
          pm2 start npm --name app-demo -- start
          
          # Display PM2 status
          echo "üìã PM2 Process Status:"
          pm2 status
          
          echo "‚úÖ Deployment completed successfully!"
          
          EOF
